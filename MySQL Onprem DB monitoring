Step 1: Install MySQL Server on Amazon Linux
For Amazon Linux 2 or 2023:
1.	Enable EPEL and MySQL repo
sudo dnf install wget -y
wget https://dev.mysql.com/get/mysql80-community-release-el9-1.noarch.rpm
sudo dnf install mysql80-community-release-el9-1.noarch.rpm -y
sudo rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2023
2.	Install MySQL Server
sudo yum install mysql-community-server -y 
3.	Start and Enable MySQL
sudo systemctl enable mysqld 
sudo systemctl start mysqld 
4.	Get the temporary root password
sudo grep 'temporary password' /var/log/mysqld.log 
5.	Secure MySQL Installation
sudo mysql_secure_installation 
[root@ip-172-31-37-248 ~]# sudo mysql_secure_installation

Securing the MySQL server deployment.
Enter password for user root:
The existing password for the user account root has expired. Please set a new password.
New password:
Re-enter new password:
The 'validate_password' component is installed on the server.
The subsequent steps will run with the existing configuration
of the component.
Using existing password for root.
Estimated strength of the password: 100
Change the password for root ? ((Press y|Y for Yes, any other key for No) : No
 ... skipping.
By default, a MySQL installation has an anonymous user,
allowing anyone to log into MySQL without having to have
a user account created for them. This is intended only for
testing, and to make the installation go a bit smoother.
You should remove them before moving into a production
environment.
Remove anonymous users? (Press y|Y for Yes, any other key for No) : No
 ... skipping.
Normally, root should only be allowed to connect from
'localhost'. This ensures that someone cannot guess at
the root password from the network.
Disallow root login remotely? (Press y|Y for Yes, any other key for No) : No
 ... skipping.
By default, MySQL comes with a database named 'test' that
anyone can access. This is also intended only for testing,
and should be removed before moving into a production
environment.
Remove test database and access to it? (Press y|Y for Yes, any other key for No) : No
 ... skipping.
Reloading the privilege tables will ensure that all changes
made so far will take effect immediately.
Reload privilege tables now? (Press y|Y for Yes, any other key for No) : Y
Success.
All done!
[root@ip-172-31-37-248 ~]#

Log in as root:
mysql -u root -p

Create a user for localhost
CREATE USER 'petclinic'@'localhost' IDENTIFIED BY 'your_secure_password';
GRANT ALL PRIVILEGES ON petclinic.* TO 'petclinic'@'localhost';
FLUSH PRIVILEGES;

Or allow a connection from any host
CREATE USER 'petclinic'@'%' IDENTIFIED BY 'your_secure_password';
GRANT ALL PRIVILEGES ON petclinic.* TO 'petclinic'@'%';
FLUSH PRIVILEGES;

./mvnw spring-boot:run -Dspring-boot.run.profiles=mysql

[root@ip-172-31-37-248 ~]# cat /myproject/spring-petclinic/src/main/resources/application-mysql.properties
database=mysql
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/petclinic
spring.datasource.username=petclinic
spring.datasource.password=1K^rn^t^k^2
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update
spring.sql.init.mode=never

[Unit]
Description=Spring PetClinic Application with Datadog Java Agent
After=network.target

[Service]
Type=simple
User=dd-agent
WorkingDirectory=/myproject/spring-petclinic
ExecStart=/usr/bin/java -javaagent:/myproject/spring-petclinic/dd-java-agent.jar -Ddd.profiling.enabled=true -XX:FlightRecorderOptions=stackdepth=256 -Ddd.logs.injection=true -Ddd.trace.sample.rate=1 -Ddd.service=mynew -Ddd.env=prod -jar /myproject/spring-petclinic/target/spring-petclinic-3.5.0-SNAPSHOT.jar --spring.profiles.active=mysql
Restart=no
RestartSec=10
StandardOutput=file:/myproject/spring-petclinic/log/petclinic.log
StandardError=file:/myproject/spring-petclinic/log/petclinic-error.log

[Install]
WantedBy=multi-user.target

â€¢  Follow prompts to set a new root password and remove insecure defaults. 
ðŸ§© Step 2: Create Datadog Monitoring User in MySQL
Datadog needs a read-only user to collect metrics.
mssql> CREATE USER 'datadog'@'%' IDENTIFIED BY 'Data@123';

[root@ip-172-31-37-248 spring-petclinic]# mysql -u datadog --password=Data@123 -e "show status" | \
grep Uptime && echo -e "\033[0;32mMySQL user - OK\033[0m" || \
echo -e "\033[0;31mCannot connect to MySQL\033[0m"
mysql: [Warning] Using a password on the command line interface can be insecure.
Uptime  4633
Uptime_since_flush_status       4633
MySQL user - OK

mysql> GRANT REPLICATION CLIENT ON *.* TO 'datadog'@'%';
Query OK, 0 rows affected (0.01 sec)

mysql> ALTER USER 'datadog'@'%' WITH MAX_USER_CONNECTIONS 5;
Query OK, 0 rows affected (0.01 sec)

mysql> GRANT PROCESS ON *.* TO 'datadog'@'%';
Query OK, 0 rows affected (0.00 sec)


[root@ip-172-31-37-248 spring-petclinic]# mysql -u datadog --password=Data@123 -e "show slave status" && \
echo -e "\033[0;32mMySQL grant - OK\033[0m" || \
echo -e "\033[0;31mMissing REPLICATION CLIENT grant\033[0m"
mysql: [Warning] Using a password on the command line interface can be insecure.
MySQL grant - OK


mysql> show databases like 'performance_schema';
+-------------------------------+
| Database (performance_schema) |
+-------------------------------+
| performance_schema            |
+-------------------------------+
1 row in set (0.00 sec)

mysql>


mysql> GRANT SELECT ON performance_schema.* TO 'datadog'@'%';
Query OK, 0 rows affected (0.00 sec)

mysql> GRANT SELECT ON mysql.innodb_index_stats TO 'datadog'@'%';
Query OK, 0 rows affected (0.01 sec)

 Step 3: Configure MySQL Integration
Edit the MySQL config file for Datadog:
sudo vi /etc/datadog-agent/conf.d/mysql.d/conf.yaml 
instances:
  - host: localhost
    username: datadog
    password: 'Data@123'

    port: 3306
    options:
      replication: false
      galera_cluster: true
      extra_status_metrics: true
      extra_innodb_metrics: true
      schema_size_metrics: false
      disable_innodb_metrics: false

sudo systemctl restart datadog-agent 
 Step 5: Verify in Datadog
â€¢	Go to Datadog Dashboard
â€¢	Navigate to Integrations > MySQL

