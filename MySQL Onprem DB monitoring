Step 1: Install MySQL Server on Amazon Linux
For Amazon Linux 2 or 2023:
1.	Enable EPEL and MySQL repo
sudo dnf install wget -y
wget https://dev.mysql.com/get/mysql80-community-release-el9-1.noarch.rpm
sudo dnf install mysql80-community-release-el9-1.noarch.rpm -y
sudo rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2023
2.	Install MySQL Server
sudo yum install mysql-community-server -y 
3.	Start and Enable MySQL
sudo systemctl enable mysqld 
sudo systemctl start mysqld 
4.	Get the temporary root password
sudo grep 'temporary password' /var/log/mysqld.log 
5.	Secure MySQL Installation
sudo mysql_secure_installation 
[root@ip-172-31-37-248 ~]# sudo mysql_secure_installation

Securing the MySQL server deployment.
Enter password for user root:
The existing password for the user account root has expired. Please set a new password.
New password:
Re-enter new password:
The 'validate_password' component is installed on the server.
The subsequent steps will run with the existing configuration
of the component.
Using existing password for root.
Estimated strength of the password: 100
Change the password for root ? ((Press y|Y for Yes, any other key for No) : No
 ... skipping.
By default, a MySQL installation has an anonymous user,
allowing anyone to log into MySQL without having to have
a user account created for them. This is intended only for
testing, and to make the installation go a bit smoother.
You should remove them before moving into a production
environment.
Remove anonymous users? (Press y|Y for Yes, any other key for No) : No
 ... skipping.
Normally, root should only be allowed to connect from
'localhost'. This ensures that someone cannot guess at
the root password from the network.
Disallow root login remotely? (Press y|Y for Yes, any other key for No) : No
 ... skipping.
By default, MySQL comes with a database named 'test' that
anyone can access. This is also intended only for testing,
and should be removed before moving into a production
environment.
Remove test database and access to it? (Press y|Y for Yes, any other key for No) : No
 ... skipping.
Reloading the privilege tables will ensure that all changes
made so far will take effect immediately.
Reload privilege tables now? (Press y|Y for Yes, any other key for No) : Y
Success.
All done!
[root@ip-172-31-37-248 ~]#

Log in as root:
mysql -u root -p

Create a user for localhost
CREATE USER 'petclinic'@'localhost' IDENTIFIED BY 'your_secure_password';
GRANT ALL PRIVILEGES ON petclinic.* TO 'petclinic'@'localhost';
FLUSH PRIVILEGES;

Or allow a connection from any host
CREATE DATABASE petclinic;
CREATE USER 'petclinic'@'%' IDENTIFIED BY 'your_secure_password';
GRANT ALL PRIVILEGES ON petclinic.* TO 'petclinic'@'%';
FLUSH PRIVILEGES;

./mvnw clean install
./mvnw spring-boot:run -Dspring-boot.run.profiles=mysql


[root@ip-172-31-46-95 mysql]# cat /myproject/spring-petclinic/src/main/resources/application-mysql.properties
# database init, supports mysql too
database=mysql
spring.datasource.url=${MYSQL_URL:jdbc:mysql://127.0.0.1:3306/petclinic}
spring.datasource.username=${MYSQL_USER:petclinic}
spring.datasource.password=${MYSQL_PASS:Petclinic@123}
# SQL is written to be idempotent so this is safe
spring.sql.init.mode=always

[Unit]
Description=Spring PetClinic Application with Datadog Java Agent
After=network.target

[Service]
Type=simple
User=dd-agent
WorkingDirectory=/myproject/spring-petclinic
ExecStart=/usr/bin/java -javaagent:/myproject/spring-petclinic/dd-java-agent.jar -Ddd.profiling.enabled=true -XX:FlightRecorderOptions=stackdepth=256 -Ddd.logs.injection=true -Ddd.trace.sample.rate=1 -Ddd.service=mynew -Ddd.env=prod -jar /myproject/spring-petclinic/target/spring-petclinic-3.5.0-SNAPSHOT.jar --spring.profiles.active=mysql
Restart=no
RestartSec=10
StandardOutput=file:/myproject/spring-petclinic/log/petclinic.log
StandardError=file:/myproject/spring-petclinic/log/petclinic-error.log

[Install]
WantedBy=multi-user.target

•  Follow prompts to set a new root password and remove insecure defaults. 
 Step 2: Create Datadog Monitoring User in MySQL
Datadog needs a read-only user to collect metrics.
mssql> CREATE USER 'datadog'@'%' IDENTIFIED BY 'Data@123';

Verify the user was created successfully using the following commands

[root@ip-172-31-37-248 spring-petclinic]# mysql -u datadog --password=Data@123 -e "show status" | \
grep Uptime && echo -e "\033[0;32mMySQL user - OK\033[0m" || \
echo -e "\033[0;31mCannot connect to MySQL\033[0m"
mysql: [Warning] Using a password on the command line interface can be insecure.
Uptime  4633
Uptime_since_flush_status       4633
MySQL user - OK

grant replication client and set max_user_connections with the following commands:

mysql> GRANT REPLICATION CLIENT ON *.* TO 'datadog'@'%';
Query OK, 0 rows affected (0.01 sec)

mysql> ALTER USER 'datadog'@'%' WITH MAX_USER_CONNECTIONS 5;
Query OK, 0 rows affected (0.01 sec)

mysql> GRANT PROCESS ON *.* TO 'datadog'@'%';
Query OK, 0 rows affected (0.00 sec)

Verify the replication client

[root@ip-172-31-37-248 spring-petclinic]# mysql -u datadog --password=Data@123 -e "show slave status" && \
echo -e "\033[0;32mMySQL grant - OK\033[0m" || \
echo -e "\033[0;31mMissing REPLICATION CLIENT grant\033[0m"
mysql: [Warning] Using a password on the command line interface can be insecure.
MySQL grant - OK


[root@ip-172-31-46-95 spring-petclinic]# mysql -u root -p
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 27
Server version: 8.0.43 MySQL Community Server - GPL

Copyright (c) 2000, 2025, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> show databases like 'performance_schema';
+-------------------------------+
| Database (performance_schema) |
+-------------------------------+
| performance_schema            |
+-------------------------------+
1 row in set (0.00 sec)

mysql> GRANT SELECT ON performance_schema.* TO 'datadog'@'%';
Query OK, 0 rows affected (0.01 sec)

mysql> GRANT SELECT ON mysql.innodb_index_stats TO 'datadog'@'%';
Query OK, 0 rows affected (0.01 sec)

 Step 3: Configure MySQL Integration
Edit the MySQL config file for Datadog:
sudo vi /etc/datadog-agent/conf.d/mysql.d/conf.yaml 
instances:
  - host: localhost
    username: datadog
    password: 'Data@123'

    port: 3306
    options:
      replication: false
      galera_cluster: true
      extra_status_metrics: true
      extra_innodb_metrics: true
      schema_size_metrics: false
      disable_innodb_metrics: false

sudo systemctl restart datadog-agent 
 Step 5: Verify in Datadog
•	Go to Datadog Dashboard
•	Navigate to Integrations > MySQL


Update log configuration

create /var/log/mysql director and log files
mkdir -p /var/log/mysql
touch /var/log/mysql/mysql.log
touch /var/log/mysql/mysql_error.log
touch /var/log/mysql/mysql_slow.log
provide read access to dd-agent
chown mysql:mysql -R /var/log/mysql
chmod 755 -R /var/log/mysql

open /etc/my.cnf and update below

  [mysqld_safe]
  log_error = /var/log/mysql/mysql_error.log

  [mysqld]
  general_log = on
  general_log_file = /var/log/mysql/mysql.log
  log_error = /var/log/mysql/mysql_error.log
  slow_query_log = on
  slow_query_log_file = /var/log/mysql/mysql_slow.log
  long_query_time = 2

restart mysql service
systemctl restart mysql

Update log configuration on datadog conf.d folder for mysql /etc/datadog-agent/conf.d/mysql.d/conf.yaml

instances:
  - host: localhost
    username: datadog
    password: 'Data@123'

    port: 3306
    options:
      replication: false
      galera_cluster: true
      extra_status_metrics: true
      extra_innodb_metrics: true
      schema_size_metrics: false
      disable_innodb_metrics: false

logs:
  - type: file
    path: "/var/log/mysql/mysql_error.log"
    source: mysql
    service: "mysql_error"

  - type: file
    path: "/var/log/mysql/mysql_slow.log"
    source: mysql
    service: "mysql_slow"
    log_processing_rules:
      - type: multi_line
        name: new_slow_query_log_entry
        pattern: "# Time:"
        # If mysqld was started with `--log-short-format`, use:
        # pattern: "# Query_time:"
        # If using mysql version <5.7, use the following rules instead:
        # - type: multi_line
        #   name: new_slow_query_log_entry
        #   pattern: "# Time|# User@Host"
        # - type: exclude_at_match
        #   name: exclude_timestamp_only_line
        #   pattern: "# Time:"

  - type: file
    path: "/var/log/mysql/mysql.log"
    source: mysql
    service: "mysql_general"


enable log monitroing in datadog.yaml
logs_enabled: true


after this please restart datadog agent, go and check log collection in mysql dashboard

Error log sample:
echo "2025-09-06T07:22:15.124678Z 0 [ERROR] Can't open the mysql.plugin table. Please run mysql_upgrade to create it." >> /var/log/mysql/mysql_error.log
echo "2025-09-06T07:22:15.124678Z 0 Can't open the mysql.plugin table. Please run mysql_upgrade to create it." >> /var/log/mysql/mysql.log

add custom queries:

    custom_queries:
      - query: SELECT COUNT(*) FROM your_database.your_table WHERE status = 'error'
        columns:
          - name: myapp.db.error_count
            type: gauge
        tags:
          - env:prod
          - db:your_database

 Track Number of Active Connections
      - query: SELECT COUNT(*) FROM INFORMATION_SCHEMA.PROCESSLIST WHERE COMMAND != 'Sleep'
  columns:
    - name: mysql.active_connections
      type: gauge
  tags:
    - env:prod

Monitor slow quries
- query: SELECT COUNT(*) FROM INFORMATION_SCHEMA.PROCESSLIST WHERE TIME > 5 AND COMMAND = 'Query'
  columns:
    - name: mysql.slow_queries
      type: count
  tags:
    - env:prod

Error count from log table

- query: SELECT COUNT(*) FROM your_database.error_logs WHERE error_level = 'critical' AND timestamp > NOW() - INTERVAL 1 HOUR
  columns:
    - name: myapp.errors.critical_hourly
      type: count
  tags:
    - severity:critical
